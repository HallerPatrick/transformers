name: Self-hosted runner (push)

on:
  push:
    branches:
      - test_push_ci
  repository_dispatch:

env:
  HF_HOME: /mnt/cache
  TRANSFORMERS_IS_CI: yes
  OMP_NUM_THREADS: 8
  MKL_NUM_THREADS: 8
  PYTEST_TIMEOUT: 60

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      test_map: ${{ steps.set-matrix.outputs.test_map }}
    steps:
      - name: Checkout transformers
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Cleanup
        run: |
          rm -rf tests/__pycache__
          rm -rf tests/models/__pycache__
          rm -rf reports

      - name: Fetch the tests to run
        run: |
          pip install --upgrade git-python
          python utils/tests_fetcher.py --diff_with_last_commit | tee test_preparation.txt
#          if [ -f test_list.txt ]; then
#            echo $(cat test_list.txt)
#          fi

      - name: Report fetched tests
        uses: actions/upload-artifact@v2
        with:
          name: test_fetched
          path: test_preparation.txt

      - id: set-matrix
        name: Organize tests into models
        run: |
          if [ -f test_list.txt ]; then
              keys=$(python3 -c 'import json; fp = open("test_list.json"); test_map = json.load(fp); fp.close(); d = list(test_map.keys()); d = d[:5]; print(d)')
              test_map=$(python3 -c 'import json; fp = open("test_list.json"); test_map = json.load(fp); fp.close(); print(test_map)')
          else
              keys=$(python3 -c 'keys = ["dummy"]; print(keys)')
              test_map=$(python3 -c 'test_map = {"dummy": []}; print(test_map)')
          fi
          echo $keys
          echo $test_map
          echo "::set-output name=matrix::$keys"
          echo "::set-output name=test_map::$test_map"

#  run_dummy:
#    name: Dummy
#    # if: contains(fromJson(needs.setup.outputs.matrix), 'dummy')
#    strategy:
#      fail-fast: false
#      matrix:
#        folders: ${{ fromJson(needs.setup.outputs.matrix) }}
#    runs-on: ubuntu-latest
#    needs: setup
#    steps:
#      - name: Checkout transformers
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 2
#
#      - name: Echo folder ${{ fromJson(needs.setup.outputs.test_map) }}
#        shell: bash
#        run: |
#          echo 1
#
#      - name: Echo folder ${{ matrix.folders }}
#        shell: bash
#        # For folders like `models/bert`, set an env. var. (`matrix_folders`) to `models_bert`, which will be used to
#        # set the artifact folder names (because the character `/` is not allowed).
#        run: |
#          echo "${{ matrix.folders }}"
#          echo "${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}"
#          matrix_folders=${{ matrix.folders }}
#          echo "$matrix_folders"
#          matrix_folders=${matrix_folders/'models/'/'models_'}
#          echo "$matrix_folders"
#          echo "matrix_folders=$matrix_folders" >> $GITHUB_ENV
#
#      - name: Set up Python 3.8
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#
#      - name: Create Venv
#        shell: bash
#        run: |
#          pip install --upgrade pip
#          python3.8 -m venv venv
#          source venv/bin/activate
#          echo "VIRTUAL ENV:" $VIRTUAL_ENV
#
#      - name: Install transformers
#        shell: bash
#        run: |
#          source venv/bin/activate
#          echo "VIRTUAL ENV:" $VIRTUAL_ENV
#          pip install --upgrade pip
#          pip install --upgrade .[dev]
#
#      - name: Run selected tests
#        shell: bash
#        run: |
#          source venv/bin/activate
#          echo "VIRTUAL ENV:" $VIRTUAL_ENV
#          python -m pytest -v ${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}


  run_tests_torch_gpu:

    name: Run PyTorch Tests on GPU
    needs: setup
    # if: contains(fromJson(needs.setup.outputs.matrix), 'dummy')
    strategy:
      fail-fast: false
      matrix:
        folders: ${{ fromJson(needs.setup.outputs.matrix) }}
    runs-on: [self-hosted, ydshieh, temp, test-ci]
    container:
      image: huggingface/transformers-all-latest-gpu
      options: --gpus 0 --shm-size "16gb" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/
    steps:

      - name: NVIDIA-SMI
        run: |
          nvidia-smi

      - name: Are GPUs recognized by our DL frameworks
        working-directory: /transformers
        run: |
          utils/print_env_pt.py
          TF_CPP_MIN_LOG_LEVEL=3 python3 -c "import tensorflow as tf; print('TF GPUs available:', bool(tf.config.list_physical_devices('GPU')))"
          TF_CPP_MIN_LOG_LEVEL=3 python3 -c "import tensorflow as tf; print('Number of TF GPUs available:', len(tf.config.list_physical_devices('GPU')))"

      - name: Echo folder ${{ matrix.folders }}
        shell: bash
        # For folders like `models/bert`, set an env. var. (`matrix_folders`) to `models_bert`, which will be used to
        # set the artifact folder names (because the character `/` is not allowed).
        run: |
          echo "${{ matrix.folders }}"
          echo "${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}"
          matrix_folders=${{ matrix.folders }}
          echo "$matrix_folders"
          matrix_folders=${matrix_folders/'models/'/'models_'}
          echo "$matrix_folders"
          echo "matrix_folders=$matrix_folders" >> $GITHUB_ENV

      - name: Update clone
        working-directory: /transformers
        run: git fetch && git checkout ${{ github.sha }}

      - name: Run all non-slow selected tests on GPU
        working-directory: /transformers
        run: |
          python3 -m pytest -n 2 --dist=loadfile -v --make-reports=tests_torch_gpu_${{ matrix.folders }} ${{ fromJson(needs.setup.outputs.test_map)[matrix.folders] }}

      - name: Failure short reports
        if: ${{ failure() }}
        continue-on-error: true
        run: cat /transformers/reports/tests_torch_gpu_${{ matrix.folders }}/failures_short.txt

      - name: Test suite reports artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: run_all_tests_torch_gpu_${{ env.matrix_folders }}_test_reports
          path: /transformers/reports/tests_torch_gpu_${{ matrix.folders }}
